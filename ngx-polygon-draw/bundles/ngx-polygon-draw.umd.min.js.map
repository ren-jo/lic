{"version":3,"sources":["ng://ngx-polygon-draw/lib/ngx-polygon-draw.service.ts","ng://ngx-polygon-draw/lib/ngx-polygon-draw.component.ts","ng://ngx-polygon-draw/lib/ngx-polygon-draw.module.ts"],"names":["NgxPolygonDrawService","Injectable","args","providedIn","NgxPolygonDrawComponent","rd","this","created","EventEmitter","perimeter","complete","line_intersects","p0","p1","p2","p3","s1_x","s1_y","s2_x","s2_y","s","t","prototype","point","x","y","ctx","fillStyle","strokeStyle","fillRect","moveTo","undo","undefined","pop","start","clear_canvas","draw","end","lineWidth","lineCap","beginPath","i","length","lineTo","closePath","fill","emit","stroke","check_intersect","point_it","event","ctrlKey","which","button","preventDefault","rect","canvas","getBoundingClientRect","clientX","left","clientY","top","push","with_draw","_this","img","Image","src","onload","getContext","drawImage","width","height","ngOnInit","setBcg","selectRootElement","polygon","bcg","Component","selector","template","Renderer2","Input","Output","ViewChild","NgxPolygonDrawModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxPolygonDrawService {\n\n  constructor() { }\n}\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, ViewChild} from '@angular/core';\n\n@Component({\n  selector: 'Ngx-NgxPolygonDraw',\n  template: `\n    <div (load)=\"clear_canvas()\">\n      <canvas #polygon id=\"jPolygon\" width=\"640\" height=\"480\" style=\"cursor:crosshair\" (mousedown)=\"point_it($event)\" oncontextmenu=\"return false;\">\n        Your browser does not support the HTML5 canvas tag.\n      </canvas>\n    </div>\n  `,\n  styles: []\n})\n\nexport class NgxPolygonDrawComponent implements OnInit {\n\n  constructor(private rd: Renderer2) { }\n  @Input() private src: string;\n  @Output() private created = new EventEmitter();\n  @ViewChild('polygon') private polygon:ElementRef;\n\n  perimeter = [];\n  complete = false;\n  private canvas;\n  private ctx;\n\n  private static line_intersects(p0, p1, p2, p3) {\n    let s1_x, s1_y, s2_x, s2_y;\n    s1_x = p1['x'] - p0['x'];\n    s1_y = p1['y'] - p0['y'];\n    s2_x = p3['x'] - p2['x'];\n    s2_y = p3['y'] - p2['y'];\n\n    let s, t;\n    s = (-s1_y * (p0['x'] - p2['x']) + s1_x * (p0['y'] - p2['y'])) / (-s2_x * s1_y + s1_x * s2_y);\n    t = ( s2_x * (p0['y'] - p2['y']) - s2_y * (p0['x'] - p2['x'])) / (-s2_x * s1_y + s1_x * s2_y);\n\n    return s >= 0 && s <= 1 && t >= 0 && t <= 1;\n    // No collision\n  }\n\n  private point(x, y){\n    this.ctx.fillStyle=\"white\";\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.fillRect(x-2,y-2,4,4);\n    this.ctx.moveTo(x,y);\n  }\n\n  undo(){\n    this.ctx = undefined;\n    this.perimeter.pop();\n    this.complete = false;\n    this.start(true);\n  }\n\n  clear_canvas(){\n    this.ctx = undefined;\n    this.perimeter = [];\n    this.complete = false;\n    // this.rd.selectRootElement(this.coordinatesElem[\"nativeElement\"]).value = '';\n    this.start(false);\n  }\n\n  private draw(end){\n    this.ctx.lineWidth = 1;\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.lineCap = \"square\";\n    this.ctx.beginPath();\n\n    for(let i = 0; i < this.perimeter.length; i++){\n      if( i == 0 ){\n        this.ctx.moveTo(this.perimeter[i]['x'],this.perimeter[i]['y']);\n        end || this.point(this.perimeter[i]['x'],this.perimeter[i]['y']);\n      } else {\n        this.ctx.lineTo(this.perimeter[i]['x'],this.perimeter[i]['y']);\n        end || this.point(this.perimeter[i]['x'],this.perimeter[i]['y']);\n      }\n    }\n    if(end){\n      this.ctx.lineTo(this.perimeter[0]['x'],this.perimeter[0]['y']);\n      this.ctx.closePath();\n      this.ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n      this.ctx.fill();\n      this.ctx.strokeStyle = 'blue';\n      this.complete = true;\n      this.created.emit(this.perimeter);\n    }\n    this.ctx.stroke();\n\n    // print coordinates\n    if(this.perimeter.length == 0){\n      // this.rd.selectRootElement(this.coordinatesElem[\"nativeElement\"]).value = '';\n    } else {\n      // this.rd.selectRootElement(this.coordinatesElem[\"nativeElement\"]).value = JSON.stringify(this.perimeter);\n    }\n  }\n\n  private check_intersect(x,y){\n    if(this.perimeter.length < 4){\n      return false;\n    }\n    let p0 = [];\n    let p1 = [];\n    let p2 = [];\n    let p3 = [];\n\n    p2['x'] = this.perimeter[this.perimeter.length-1]['x'];\n    p2['y'] = this.perimeter[this.perimeter.length-1]['y'];\n    p3['x'] = x;\n    p3['y'] = y;\n\n    for(let i=0; i<this.perimeter.length-1; i++){\n      p0['x'] = this.perimeter[i]['x'];\n      p0['y'] = this.perimeter[i]['y'];\n      p1['x'] = this.perimeter[i+1]['x'];\n      p1['y'] = this.perimeter[i+1]['y'];\n      if(p1['x'] == p2['x'] && p1['y'] == p2['y']){ continue; }\n      if(p0['x'] == p3['x'] && p0['y'] == p3['y']){ continue; }\n      if(NgxPolygonDrawComponent.line_intersects(p0,p1,p2,p3)==true){\n        return true;\n      }\n    }\n    return false;\n  }\n\n  point_it(event) {\n    if(this.complete){\n      // alert('Ð Ð°Ð·Ð¼ÐµÑÐºÐ° ÑÐ¶Ðµ ÑÐ¾Ð·Ð´Ð°Ð½Ð°');\n      this.created.emit('already created');\n      return false;\n    }\n    let rect, x, y;\n\n    if(event.ctrlKey || event.which === 3 || event.button === 2){\n      if(this.perimeter.length == 2){\n        // alert('ÐÐ»Ñ ÑÐ¾Ð·Ð´Ð°Ð½Ð¸Ñ ÑÐ°Ð·Ð¼ÐµÑÐºÐ¸ Ð½ÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð½Ðµ Ð¼ÐµÐ½ÐµÐµ 3-Ñ ÑÐ¾ÑÐµÐº');\n        this.created.emit('at least 3 points required');\n        return false;\n      }\n      x = this.perimeter[0]['x'];\n      y = this.perimeter[0]['y'];\n      if(this.check_intersect(x,y)){\n        // alert('Ð­ÑÐ° Ð»Ð¸Ð½Ð¸Ñ Ð¿ÐµÑÐµÑÐµÐºÐ°ÐµÑ Ð´ÑÑÐ³ÑÑ');\n        this.created.emit('line intersecrion');\n        return false;\n      }\n      this.draw(true);\n      // alert('Ð Ð°Ð·Ð¼ÐµÑÐºÐ° Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð°');\n      event.preventDefault();\n      return false;\n    } else {\n      rect = this.canvas.getBoundingClientRect();\n      x = event.clientX - rect.left;\n      y = event.clientY - rect.top;\n      if (this.perimeter.length>0 && x == this.perimeter[this.perimeter.length-1]['x'] && y == this.perimeter[this.perimeter.length-1]['y']){\n        // same point - double click\n        return false;\n      }\n      if(this.check_intersect(x,y)){\n        // alert('Ð­ÑÐ° Ð»Ð¸Ð½Ð¸Ñ Ð¿ÐµÑÐµÑÐµÐºÐ°ÐµÑ Ð´ÑÑÐ³ÑÑ');\n        this.created.emit('line intersection');\n        return false;\n      }\n      this.perimeter.push({'x':x,'y':y});\n      this.draw(false);\n      return false;\n    }\n  }\n\n  private start(with_draw: boolean) {\n    const img = new Image();\n    img.src = this.src;\n    img.onload = () => {\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      if(with_draw == true){\n        this.draw(false);\n      }\n    }\n  }\n\n  ngOnInit() {\n    this.setBcg();\n    this.start(false);\n  }\n\n  private setBcg() {\n    this.canvas = this.rd.selectRootElement(this.polygon[\"nativeElement\"]);\n    this.ctx = this.canvas.getContext(\"2d\");\n    let bcg = new Image();\n\n    bcg.src = this.src;\n    bcg.onload = () => {\n      this.ctx.drawImage(bcg, 0, 0)\n    };\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxPolygonDrawComponent } from './ngx-polygon-draw.component';\n\n@NgModule({\n  declarations: [NgxPolygonDrawComponent],\n  imports: [\n  ],\n  exports: [NgxPolygonDrawComponent]\n})\nexport class NgxPolygonDrawModule { }\n"]}